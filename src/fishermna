import java.util.List;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantLock;
import java.util.random.RandomGenerator;

public class Fisherman {
    static Oat[] oats = new Oat[5];
    public static void main(String[] args) throws InterruptedException {
        System.out.println("Start Main");
        for (int i = 0; i < 5 ; i++) {
            oats[i]= new Oat(); // 5 oats
        }
        // Create five FishermanThread instances
        FishermanThread f1 = new FishermanThread("Jens");
        FishermanThread f2 = new FishermanThread("Bo");
        FishermanThread f3 = new FishermanThread("Anna");
        FishermanThread f4 = new FishermanThread("Carl");
        FishermanThread f5 = new FishermanThread("Dana");

        // Start each thread
        f1.start();
        f2.start();
        f3.start();
        f4.start();
        f5.start();

        // Wait for each thread to finish
        try {
            f1.join();
            f2.join();
            f3.join();
            f4.join();
            f5.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("All fishermen have finished their tasks.");

        System.out.println("End Main");

    }



}


class FishermanThread extends Thread {
    String name;
    int amountOfOats;
    Random r = new Random();
    boolean run =true;

    public FishermanThread(String name) {
        this.name = name;
        this.amountOfOats=0;
    }

    @Override
    public void run() {
        System.out.println("Start "+name);

        int value;
        try {
            while (run){

                Thread.sleep(r.nextInt(5)*1000);
                value= r.nextInt(5);
                Thread.sleep(1000);
                Fisherman.oats[value].lock();
                System.out.println(name+" has oat "+ Fisherman.oats[value].id);
                this.amountOfOats+=1;


                value= r.nextInt(5);
                Thread.sleep(1000);
                Fisherman.oats[value].lock();
                System.out.println(name+" has oat "+ Fisherman.oats[value].id);
                this.amountOfOats+=1;

                //
                /* value= r.nextInt(5);
                Thread.sleep(1000);
                Fisherman.oats[value].tryLock(5, TimeUnit.SECONDS);
                System.out.println(name+" has oat "+ Fisherman.oats[value].id);

                value= r.nextInt(5);
                Thread.sleep(1000);
                Fisherman.oats[value].tryLock(5, TimeUnit.SECONDS);
                System.out.println(name+" has oat "+ Fisherman.oats[value].id);

                int counter =0;
                for (Oat o: Fisherman.oats) {
                    if(o.isHeldByCurrentThread()){
                        counter++;
                    }
                    if(counter ==2){
                        System.out.println(name+ " is done");
                        run=false;
                        break;
                    }





                } */










            }

        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }





        System.out.println("End "+name);

    }
    int[] freeOats(){
        int[] b = new int[5];
        for (int i = 0; i <Fisherman.oats.length; i++) {
            if(!Fisherman.oats[i].isLocked()){
                b[i]=i;
            }

        }

            return b;
    }

}
class Oat extends ReentrantLock{
    static int counter=0;

    int id;

    public Oat() {
        this.id = counter;
        counter++;

    }
}

